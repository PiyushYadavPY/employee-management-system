{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AppComponent = class AppComponent {\n  constructor(fb, employeeService) {\n    this.fb = fb;\n    this.employeeService = employeeService;\n    this.title = 'Employee';\n    this.submitted = false;\n    // firstname : any\n    // lastname : any\n    // firstname : any\n    // lastname : any\n    this.educationOptions = ['10th pass', 'diploma', 'garduation', 'post graduation', 'Phd'];\n    this.employeeForm = fb.group({});\n    this.employees = [];\n    this.employeesToDisplay = this.employees;\n  }\n  // initVal() {\n  //   this.firstname = \"\"\n  //   this.lastname =\"\"\n  // }\n  ngOnInit() {\n    // this.initVal()\n    this.employeeForm = this.fb.group({\n      // firstname: this.fb.control(''),\n      // lastname: this.fb.control(''),\n      // email : ['',Validators.required],\n      //     email :[\n      //       '',\n      //     [\n      //     Validators.required , \n      //     Validators.pattern('[a-z0-9]*((-|s)*[_A-z0-9])*$')\n      //   ],\n      // ],\n      // birthday: this.fb.control(''),\n      // gender: this.fb.control(''),\n      // education: this.fb.control('default'),\n      // company: this.fb.control(''),\n      // jobExperience: this.fb.control(''),\n      // salary: this.fb.control('')\n      // firstname : ['', Validators.required]\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      birthday: ['', Validators.required],\n      gender: ['', Validators.required],\n      education: ['', Validators.required],\n      company: ['', Validators.required],\n      jobExperience: ['', Validators.required],\n      salary: ['', Validators.required]\n    });\n    this.employeeService.getEmployees().subscribe(res => {\n      for (let emp of res) {\n        this.employees.unshift(emp);\n      }\n      this.employeesToDisplay = this.employees;\n    });\n  }\n  ngAfterViewInit() {\n    // this.buttontemp.nativeElement.click()\n  }\n  addEmployee() {\n    if (this.employeeForm.valid) {\n      let employee = {\n        firstname: this.FirstName.value,\n        lastname: this.LastName.value,\n        email: this.Email.value,\n        birthday: this.Birthday.value,\n        gender: this.Gender.value,\n        education: this.educationOptions[parseInt(this.Education.value)],\n        company: this.Company.value,\n        jobExperience: this.JobExperience.value,\n        salary: this.Salary.value,\n        profile: this.fileInput.nativeElement.files[0]?.name\n      };\n      this.employeeService.postEmployee(employee).subscribe(res => {\n        this.employees?.unshift(res);\n        this.clearForm();\n      });\n    } else {\n      alert('Please fill all the required fields');\n    }\n  }\n  get myForm() {\n    return this.employeeForm.controls;\n  }\n  // onSubmit() {\n  //   this.submitted = true;\n  //   if (!this.employeeForm.valid) {\n  //     alert('Please fill all the required fields');\n  //     return false;\n  //   }\n  //   else {\n  //     return console.log(this.employeeForm.value)\n  //   }\n  // }\n  clearForm() {\n    this.FirstName.setValue('');\n    this.LastName.setValue('');\n    this.Email.setValue('');\n    this.Birthday.setValue('');\n    this.Gender.setValue('');\n    this.Education.setValue('');\n    this.Company.setValue('');\n    this.JobExperience.setValue('');\n    this.Salary.setValue('');\n    this.fileInput.nativeElement.value = '';\n  }\n  get FirstName() {\n    return this.employeeForm.get('firstname');\n  }\n  get LastName() {\n    return this.employeeForm.get('lastname');\n  }\n  get Email() {\n    return this.employeeForm.get('email');\n  }\n  get Birthday() {\n    return this.employeeForm.get('birthday');\n  }\n  get Gender() {\n    return this.employeeForm.get('gender');\n  }\n  get Education() {\n    return this.employeeForm.get('education');\n  }\n  get Company() {\n    return this.employeeForm.get('company');\n  }\n  get JobExperience() {\n    return this.employeeForm.get('jobExperience');\n  }\n  get Salary() {\n    return this.employeeForm.get('salary');\n  }\n};\n__decorate([ViewChild('fileInput')], AppComponent.prototype, \"fileInput\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","ViewChild","Validators","AppComponent","constructor","fb","employeeService","title","submitted","educationOptions","employeeForm","group","employees","employeesToDisplay","ngOnInit","firstname","required","lastname","email","birthday","gender","education","company","jobExperience","salary","getEmployees","subscribe","res","emp","unshift","ngAfterViewInit","addEmployee","valid","employee","FirstName","value","LastName","Email","Birthday","Gender","parseInt","Education","Company","JobExperience","Salary","profile","fileInput","nativeElement","files","name","postEmployee","clearForm","alert","myForm","controls","setValue","get","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Employee Management System\\Employee\\src\\app\\app.component.ts"],"sourcesContent":["import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Employee } from './models/employee.model';\nimport { EmployeeService } from './service/employee.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n  @ViewChild('fileInput') fileInput: any\n  title = 'Employee';\n\n  submitted = false;\n\n  employeeForm: FormGroup;\n\n  employees: Employee[];\n  employeesToDisplay: Employee[];\n\n  // firstname : any\n  // lastname : any\n\n\n  // firstname : any\n  // lastname : any\n\n  educationOptions = [\n    '10th pass',\n    'diploma',\n    'garduation',\n    'post graduation',\n    'Phd'\n  ]\n\n\n  constructor(private fb: FormBuilder, private employeeService: EmployeeService) {\n    this.employeeForm = fb.group({})\n    this.employees = []\n    this.employeesToDisplay = this.employees\n  }\n\n  // initVal() {\n  //   this.firstname = \"\"\n  //   this.lastname =\"\"\n\n  // }\n  ngOnInit(): void {\n    // this.initVal()\n    this.employeeForm = this.fb.group({\n      // firstname: this.fb.control(''),\n      // lastname: this.fb.control(''),\n      // email : ['',Validators.required],\n      //     email :[\n      //       '',\n      //     [\n      //     Validators.required , \n      //     Validators.pattern('[a-z0-9]*((-|s)*[_A-z0-9])*$')\n      //   ],\n      // ],\n      // birthday: this.fb.control(''),\n      // gender: this.fb.control(''),\n      // education: this.fb.control('default'),\n      // company: this.fb.control(''),\n      // jobExperience: this.fb.control(''),\n      // salary: this.fb.control('')\n      // firstname : ['', Validators.required]\n\n\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      birthday: ['', Validators.required],\n      gender: ['', Validators.required],\n      education: ['', Validators.required],\n      company: ['', Validators.required],\n      jobExperience: ['', Validators.required],\n      salary: ['', Validators.required],\n\n\n\n    });\n\n    this.employeeService.getEmployees().subscribe(res => {\n      for (let emp of res) {\n        this.employees.unshift(emp)\n      }\n      this.employeesToDisplay = this.employees;\n    })\n  }\n\n  ngAfterViewInit(): void {\n    // this.buttontemp.nativeElement.click()\n  }\n\n  addEmployee() {\n\n\n    if (this.employeeForm.valid) {\n      let employee: Employee = {\n        firstname: this.FirstName.value,\n        lastname: this.LastName.value,\n        email: this.Email.value,\n        birthday: this.Birthday.value,\n        gender: this.Gender.value,\n        education: this.educationOptions[parseInt(this.Education.value)],\n        company: this.Company.value,\n        jobExperience: this.JobExperience.value,\n        salary: this.Salary.value,\n        profile: this.fileInput.nativeElement.files[0]?.name,\n\n      }\n\n      this.employeeService.postEmployee(employee).subscribe((res) => {\n        this.employees?.unshift(res);\n        this.clearForm();\n      })\n    }\n    else{\n      alert('Please fill all the required fields');\n    }\n  }\n\n  get myForm() {\n    return this.employeeForm.controls;\n  }\n\n  // onSubmit() {\n  //   this.submitted = true;\n  //   if (!this.employeeForm.valid) {\n  //     alert('Please fill all the required fields');\n  //     return false;\n  //   }\n  //   else {\n  //     return console.log(this.employeeForm.value)\n  //   }\n  // }\n\n  clearForm() {\n    this.FirstName.setValue('');\n    this.LastName.setValue('');\n    this.Email.setValue('');\n    this.Birthday.setValue('');\n    this.Gender.setValue('');\n    this.Education.setValue('');\n    this.Company.setValue('');\n    this.JobExperience.setValue('');\n    this.Salary.setValue('');\n    this.fileInput.nativeElement.value = '';\n\n  }\n\n  public get FirstName(): FormControl {\n    return this.employeeForm.get('firstname') as FormControl;\n  }\n\n  public get LastName(): FormControl {\n    return this.employeeForm.get('lastname') as FormControl;\n  }\n  public get Email(): FormControl {\n    return this.employeeForm.get('email') as FormControl\n  }\n  public get Birthday(): FormControl {\n    return this.employeeForm.get('birthday') as FormControl;\n  }\n\n  public get Gender(): FormControl {\n    return this.employeeForm.get('gender') as FormControl;\n  }\n\n  public get Education(): FormControl {\n    return this.employeeForm.get('education') as FormControl;\n  }\n\n  public get Company(): FormControl {\n    return this.employeeForm.get('company') as FormControl;\n  }\n\n  public get JobExperience(): FormControl {\n    return this.employeeForm.get('jobExperience') as FormControl;\n  }\n\n  public get Salary(): FormControl {\n    return this.employeeForm.get('salary') as FormControl;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}